{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","letter","guessedLetters","lifes","correctGuesses","lettersAmount","movie","movieAct","movies","gameOverModal","victoryModal","enterShortcut","event","key","checkLetter","inputFrom","isGuessedLetterCorrect","isLetterPickedAlready","tempArrayMovieAct","tempArrayGuessedLetters","tempCorrectGuesses","length","forEach","push","movieChar","arrayIndex","setState","toggleGameOverModal","document","getElementById","removeEventListener","disabled","setAttribute","toggleVictoryModal","value","updateLetter","resetGameHelper","randomIndex","Math","round","random","moviesAct","title","toUpperCase","split","index","toggleVictory","toggleGameOver","addEventListener","bind","assertThisInitialized","fetch","res","json","movieDummy","results","console","log","_context","t0","_this2","react_default","a","createElement","reactstrap_es","isOpen","className","color","onClick","_this$state","letterCell","concat","map","id","placeholder","onChange","target","undefined","type","guessedLetter","Component","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fe49872.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass Game extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.toggleGameOverModal = this.toggleGameOverModal.bind(this);\n    this.toggleVictoryModal = this.toggleVictoryModal.bind(this);\n  }\n\n  state = {\n    letter: '',\n    guessedLetters: [],\n    lifes: 10,\n    correctGuesses: 0,\n    lettersAmount: 0,\n    movie: [],\n    movieAct: [],\n    movies: [],\n    gameOverModal: false,\n    victoryModal: false\n  }\n  \n  async componentDidMount() {\n    try {\n      const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=a9a044fab959ff29628041fff2fcac7b&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1');\n      const movies = await res.json();\n      const randomIndex = Math.round(Math.random() * (19 - 0) + 0);\n      let movieDummy = movies.results[randomIndex].title.toUpperCase().split('');\n      let lettersAmount = 0;\n      let moviesAct = movieDummy;\n      \n      for (let index = 0; index < moviesAct.length; index++) {\n        if(moviesAct[index] !== ':' && moviesAct[index] !== '-' && moviesAct[index] !== ' '){\n          lettersAmount++;\n          moviesAct[index] = '';\n        }    \n      }\n      this.setState({\n        movie: movies.results[randomIndex].title.toUpperCase().split(''),\n        movieAct: moviesAct,\n        movies: movies.results,\n        lettersAmount: lettersAmount\n      });\n    } catch (e) {\n      console.log(e);\n    }\n    document.getElementById('letter-input').addEventListener('keydown', this.enterShortcut, false)\n  }\n\n  enterShortcut = (event) => {\n    if(event.key === 'Enter')\n        this.checkLetter(\"Enter\");\n  }\n\n  checkLetter = (inputFrom) => {\n    let isGuessedLetterCorrect = false;\n    let isLetterPickedAlready = false;\n    let tempArrayMovieAct = this.state.movieAct;\n    let tempArrayGuessedLetters = this.state.guessedLetters; \n    let tempCorrectGuesses = this.state.correctGuesses;\n\n    if(this.state.guessedLetters.length !== 0){\n      this.state.guessedLetters.forEach(letter => {\n        if(letter === this.state.letter){\n          isLetterPickedAlready = true;\n        }\n      })\n    }\n  \n    if(!isLetterPickedAlready){\n      tempArrayGuessedLetters.push(this.state.letter)\n      this.state.movie.forEach((movieChar, arrayIndex) => {\n        if(movieChar === this.state.letter){\n          tempArrayMovieAct[arrayIndex] = this.state.letter;\n          tempCorrectGuesses++;\n          this.setState({movieAct: tempArrayMovieAct, correctGuesses: tempCorrectGuesses})\n          isGuessedLetterCorrect = true;\n        }\n      })\n    }\n    \n    if (isGuessedLetterCorrect === false && this.state.letter !== '')\n      this.setState({guessedLetters: tempArrayGuessedLetters, lifes: (this.state.lifes-1)});\n    else if (isGuessedLetterCorrect === true && this.state.letter !== '')\n      this.setState({guessedLetters: tempArrayGuessedLetters});\n    \n    if(this.state.lifes === 0 && inputFrom === \"Enter\"){\n      this.toggleGameOverModal();\n      document.getElementById('letter-input').removeEventListener('keydown', this.enterShortcut, false);\n      document.getElementById(\"checkButton\").disabled = true;\n      document.getElementById(\"checkButton\").setAttribute('class', 'button-inactive');\n    }\n    else if (this.state.lifes === 1 && inputFrom === \"Button\"){\n      this.toggleGameOverModal();\n      document.getElementById('letter-input').removeEventListener('keydown', this.enterShortcut, false);\n      document.getElementById(\"checkButton\").disabled = true;\n      document.getElementById(\"checkButton\").setAttribute('class', 'button-inactive');\n    }\n\n    if(tempCorrectGuesses === this.state.lettersAmount){\n      this.toggleVictoryModal();\n    }\n    this.setState({letter: ''})\n    document.getElementById(\"letter-input\").value = '';\n  }\n\n  updateLetter = (letter) => {\n    this.setState({letter: letter});\n  }\n\n  resetGameHelper = () => {\n    const randomIndex = Math.round(Math.random() * (19 - 0) + 0);\n    let lettersAmount = 0;\n    let movie = this.state.movies[randomIndex].title.toUpperCase().split('');\n    let moviesAct = movie\n\n    for (let index = 0; index < moviesAct.length; index++) {\n      if(moviesAct[index] !== ':' && moviesAct[index] !== '-' && moviesAct[index] !== ' '){\n        lettersAmount++;\n        moviesAct[index] = '';\n      }    \n    }\n\n    this.setState({\n      correctGuesses: 0,\n      movieAct: moviesAct,\n      movie: this.state.movies[randomIndex].title.toUpperCase().split(''),\n      lettersAmount: lettersAmount,\n      guessedLetters: [],\n      lifes: 10\n    });\n  }\n\n  toggleVictory = () => {\n    this.resetGameHelper();\n    this.setState({victoryModal: !this.state.victoryModal});\n  }\n\n  toggleGameOver = () => {\n    this.resetGameHelper();\n    document.getElementById('letter-input').addEventListener('keydown', this.enterShortcut, false);\n    document.getElementById(\"checkButton\").disabled = false;\n    document.getElementById(\"checkButton\").setAttribute('class', 'button-active');\n    this.setState({gameOverModal: !this.state.gameOverModal})\n  }\n\n  toggleVictoryModal = () => {\n    this.setState({victoryModal: !this.state.victoryModal})\n  }\n  toggleGameOverModal = () => {\n    this.setState({gameOverModal: !this.state.gameOverModal});\n  }\n\n  render() {\n\n    const gameOverModal = (<div>\n                            <Modal isOpen={this.state.gameOverModal} className={this.props.className}>\n                              <ModalHeader>Koniec gry</ModalHeader>\n                              <ModalBody>\n                                Wykorzystano wszystkie szanse!\n                              </ModalBody>\n                              <ModalFooter>\n                                <Button color=\"primary\" onClick={this.toggleGameOver}>Zagraj ponownie</Button>\n                              </ModalFooter>\n                            </Modal>\n                          </div>)\n\n    const victoryModal = (<div>\n                            <Modal isOpen={this.state.victoryModal} className={this.props.className}>\n                              <ModalHeader>Gratulacje</ModalHeader>\n                              <ModalBody>\n                                Poprawnie odgadnięto tytuł filmu!\n                              </ModalBody>\n                              <ModalFooter>\n                                <Button color=\"primary\" onClick={this.toggleVictory}>Zagraj ponownie</Button>\n                              </ModalFooter>\n                            </Modal>\n                          </div>)\n\n    const { lifes, movieAct, guessedLetters } = this.state;\n    let letterCell = []; \n\n    movieAct.forEach((letter, index) => {\n      if(letter !== ' ' && letter !== ':' && letter !== '-')\n        letterCell.push((<div key={`${letter}${index}`} className=\"cell\">{letter}</div>))\n      else if (letter === ':' || letter === '-')\n        letterCell.push((<div key={`${letter}${index}`} className=\"empty-cell\">{letter}</div>))\n      else\n        letterCell.push((<div key={`${letter}${index}`} className=\"empty-cell\"></div>))\n    })\n\n\n    return (\n      <div className=\"game\">\n        <div className=\"title\">Lifes:</div>\n        <div className=\"life-number\">\n          {lifes}\n        </div>\n        <div className=\"movie-title\">\n          {letterCell.map(letter => letter)}\n        </div>\n        <div className=\"input-container\">\n          <input id=\"letter-input\" placeholder=\"Wybierz literę\" onChange={(event) => {\n            let value = event.target.value.toUpperCase().split('')[0];\n            if (value !== undefined)\n              event.target.value = value;\n            else\n              event.target.value = '';\n            this.updateLetter(value);\n            }\n          }\n            className=\"input\" type=\"text\">\n          </input>\n        </div>\n        <button id=\"checkButton\" className=\"button-active\" onClick={(event) => {\n          this.checkLetter(\"Button\")\n        }}>Click</button>\n        <div className=\"title\">Wybrane litery:</div>\n        <div className=\"picked-letters\">{guessedLetters.map((guessedLetter, index) => (<div key={`${guessedLetter}${index}`} className=\"guessed-letter\">{`${guessedLetter} `}</div>))}</div>\n        {gameOverModal}\n        {victoryModal}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Wisielec filmowy</header>\n        <Game></Game>\n        <div className=\"footer\">\n          <div className=\"footer-author\">Aplikacja wykonana przez Karol Rosiński</div>\n          <div className=\"footer-info\">Aplikacja korzysta z API MovieDB</div>         \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}